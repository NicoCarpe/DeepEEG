#!/usr/bin/env python

from utils import *
import sqlite3
import pandas as pd
import random


connection = None
cursor = None

#creates cursor to run SQL queries
def connect(path):
    global connection, cursor
    connection = sqlite3.connect(path)
    cursor = connection.cursor()
    cursor.execute( 'PRAGMA foreign_keys=ON; ')
    connection.commit()
    return

#creates table for the test data
def createTable():
    global connection, cursor
    cursor.execute("CREATE TABLE IF NOT EXISTS tests (test_num INTEGER PRIMARY KEY, accuracy FLOAT NOT NULL, score FLOAT NOT NULL, model TEXT NOT NULL, units TEXT NOT NULL, dropout FLOAT NOT NULL, batch_norm BOOLEAN NOT NULL, filt_size INTEGER NOT NULL, pool_size INTEGER NOT NULL);")

#takes data from the tests and inserts it into the test table
def insertData(test_num,accuracy,score,model,units,dropout,batch_norm,filt_size,pool_size):
    global connection, cursor
    cursor.execute("INSERT INTO tests(test_num,accuracy,score,model,units,dropout,batch_norm,filt_size,pool_size) VALUES(:test_num,:accuracy,:score,:model,:units,:dropout,:batch_norm,:filt_size,:pool_size);",{"test_num":test_num,"accuracy":accuracy,"score":score,"model":model,"units":units,"dropout":dropout,"batch_norm":batch_norm,"filt_size":filt_size,"pool_size":pool_size})

#returns the length of the table
def table_length():
    global connection, cursor
    cursor.execute("SELECT COUNT(*) FROM tests;")
    length = cursor.fetchall()
    return int(length[0][0])


def main():
    path = "testDB.db"
    connect(path)
    createTable()

    index = table_length()
    tests = int(input("How many random tests would you like to simulate?: "))

    for test in range(tests):
        model_type = random.sample(["NN"],1) #,"CNN","CNN3D","LSTM"],1)
        model_type = model_type[0]
        units = []
        length = random.randint(1,5)

        if length%2 == 0:
            if length//2 == 0:
                unit = (random.randint(0,6))
                units.append(2**unit)
                units.append(2**unit)
            else:
                unit = (random.randint(1,6))
                units.append(2**unit)
                units.append(2**(unit-1))
                units.append(2**(unit-1))
                units.append(2**unit)

        else:
            if length == 1:
                unit = (random.randint(0,6))
                units.append(2**unit)

            elif length == 3:
                unit = (random.randint(1,6))
                units.append(2**unit)
                units.append(2**(unit-1))
                units.append(2**unit)

            else:
                unit = (random.randint(2,6))
                units.append(2**unit)
                units.append(2**(unit-1))
                units.append(2**(unit-2))
                units.append(2**(unit-1))
                units.append(2**unit)

        dropout = 0.25
        batch_norm = 1
        filt_size = 3
        pool_size = 2

        raw,event_id = SimulateRaw(amp1=100,amp2=50,freq=2.,batch=1)
        epochs = PreProcess(raw,event_id,filter_data = False, plot_erp = False)

        pick = 33
        '''
        for event in event_id.keys():
            fig = plt.imshow(epochs[event]._data[:,pick,:])
            plt.show()
        '''

        feats = FeatureEngineer(epochs,model_type=model_type)
        model,_ = CreateModel(feats,units=units,)
        _,results = TrainTestVal(model,feats,show_plots = False)
        accuracy = results["acc"]
        score = results["score"]

        insertData(index,accuracy,score,model_type,str(units),dropout,batch_norm,filt_size,pool_size)
        index += 1


    connection.commit()
    connection.close()

    return

if __name__ == "__main__":
    main()
